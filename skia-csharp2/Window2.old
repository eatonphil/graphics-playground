using OpenTK.Windowing.Common;
using OpenTK.Windowing.Desktop;
using OpenTK.Graphics.OpenGL4;

using SkiaSharp;

namespace Skia_OpenTK
{
    public class Window : GameWindow
    {
        GRContext grContext;
        SKSurface surface;
        SKPaint TestBrush;

	private int WindowWidth = 1280, WindowHeight = 720;

        public Window(string title, int width, int height) : base(new GameWindowSettings
        {
            IsMultiThreaded = false,
            RenderFrequency = 60.0
        },
        new NativeWindowSettings
        {
            Title = title,
	    WindowBorder = WindowBorder.Resizable,
	    Size = new OpenTK.Mathematics.Vector2i(width, height),
        })
        {
            VSync = VSyncMode.Off;
	    WindowWidth = width;
	    WindowHeight = height;
        }

	private void SkiaInit() {
	    grContext = GRContext.CreateGl();
	    SkiaResize(WindowWidth, WindowHeight);
	}

        protected override void OnLoad()
        {
            base.OnLoad();
	    SkiaInit();

            TestBrush = new SKPaint
            {
                Color = SKColors.White,
                IsAntialias = true,
                Style = SKPaintStyle.Fill,
                TextAlign = SKTextAlign.Center,
                TextSize = 25
            };
        }

	private void SkiaResize(int w, int h) {
	    Console.WriteLine("W: {0}, H: {1}", WindowWidth, WindowHeight);
	    WindowWidth = w;
	    WindowHeight = h;

	    if (grContext == null) SkiaInit();

            GRGlFramebufferInfo fbi = new GRGlFramebufferInfo(0, (uint)InternalFormat.Rgba8);
            var ctype = SKColorType.Rgba8888;
            var beTarget = new GRBackendRenderTarget(w, h, 0, 0, fbi);

            // Dispose Previous Surface
            surface?.Dispose();
            surface = SKSurface.Create(grContext, beTarget, GRSurfaceOrigin.BottomLeft, ctype, null, null);
            if (surface == null)
            {
                Close();
            }
	}

        protected override void OnUnload()
        {
            TestBrush.Dispose();
            surface.Dispose();
            grContext.Dispose();
            base.OnUnload();
        }

	protected override void OnResize(ResizeEventArgs e) {
	    SkiaResize(e.Width, e.Height);
	    base.OnResize(e);
	}

        double time = 0;
        protected override void OnRenderFrame(FrameEventArgs args)
        {
	    var canvas = surface.Canvas;
	    time += args.Time;
            canvas.Clear(SKColors.CornflowerBlue);

            TestBrush.Color = SKColors.White;
            canvas.DrawRoundRect(new SKRoundRect(new SKRect(0, 0, 256, 256), (float)Math.Max(Math.Sin(-time) * 128.0f, 0)), TestBrush);

	    canvas.DrawRoundRect(new SKRoundRect(new SKRect(0, 0, 256, 512), (float)Math.Max(Math.Sin(-time) * 128.0f, 0)), TestBrush);

            TestBrush.Color = SKColors.Black;
            canvas.DrawText("Hello, World!", 128, 300, TestBrush);

            canvas.Flush();
            SwapBuffers();
        }
    }
}
